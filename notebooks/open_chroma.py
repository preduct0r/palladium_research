#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ChromaDB
"""

import os
from langchain_community.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CHROMA_DB_PATH = "chroma_db"
COLLECTION_NAME = "relevant_data"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–µ—Ä–∞ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã)
embedder = OpenAIEmbeddings(
    model="Qwen/Qwen3-Embedding-8B", 
    base_url="http://localhost:8100/v1",
    api_key="EMPTY"
)

def load_chroma_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é ChromaDB –±–∞–∑—É"""
    if not os.path.exists(CHROMA_DB_PATH):
        raise ValueError(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {CHROMA_DB_PATH}")
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º ChromaDB –∏–∑: {CHROMA_DB_PATH}")
    
    vectorstore = Chroma(
        collection_name=COLLECTION_NAME,
        embedding_function=embedder,
        persist_directory=CHROMA_DB_PATH
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    count = vectorstore._collection.count()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {count}")
    
    return vectorstore

def search_query(vectorstore, query: str, k: int = 5):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
    
    retriever = vectorstore.as_retriever(search_kwargs={"k": k})
    results = retriever.get_relevant_documents(query)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    print("=" * 60)
    
    for i, doc in enumerate(results, 1):
        print(f"\n{i}. Score: {doc.metadata.get('score', 'N/A')}")
        print(f"Source: {doc.metadata.get('source', 'N/A')}")
        print(f"Content: {doc.page_content[:2000]}...")
    
    return results

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
    vectorstore = load_chroma_db()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        # "Gold miners experiencing palladium shortage",
        "Biological activity of cells",
        # "palladium processing",
        # "–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è –ø–∞–ª–ª–∞–¥–∏—è",
        # "extraction methods"
    ]
    
    for query in test_queries:
        search_query(vectorstore, query, k=3)
        print("\n" + "="*300 + "\n")
    
    # # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    # print("üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–≤–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    # while True:
    #     # user_query = input("\n–í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
    #     if user_query.lower() in ['quit', 'exit', 'q']:
    #         break
    #     if user_query:
    #         search_query(vectorstore, user_query, k=5)
